# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'blankWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import pyVista as Mesh  
from pyvistaqt import QtInteractor, MainWindow
import os 

colors=['linen', 
    'silver', 'gray', 'linen', \
    'tan', 'teal', 'orange', 'blue', \
        'yellow', 'red', 'black']

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(963, 679)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.gridLayout.addLayout(self.verticalLayout, 1, 0, 1, 1)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.pushButton_openfile = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_openfile.setMaximumSize(QtCore.QSize(100, 30))
        self.pushButton_openfile.setObjectName("pushButton_openfile")
        self.horizontalLayout.addWidget(self.pushButton_openfile)
        self.pushButton_add_Mesh = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_add_Mesh.setMaximumSize(QtCore.QSize(100, 30))
        self.pushButton_add_Mesh.setObjectName("pushButton_add_Mesh")
        self.horizontalLayout.addWidget(self.pushButton_add_Mesh)
        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox.setMaximumSize(QtCore.QSize(150, 30))
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.horizontalLayout.addWidget(self.comboBox)
        self.gridLayout.addLayout(self.horizontalLayout, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 963, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton_openfile.setText(_translate("MainWindow", "open 3d mesh"))
        self.pushButton_add_Mesh.setText(_translate("MainWindow", "add Mesh"))
        self.comboBox.setItemText(0, _translate("MainWindow", "linen"))
        self.comboBox.setItemText(1, _translate("MainWindow", "teal"))
        self.comboBox.setItemText(2, _translate("MainWindow", "blue"))
        self.comboBox.setItemText(3, _translate("MainWindow", "orange"))
        self.comboBox.setItemText(4, _translate("MainWindow", "red"))
        self.comboBox.setItemText(5, _translate("MainWindow", "yellow"))
        self.comboBox.setItemText(6, _translate("MainWindow", "tan"))
        self.comboBox.setItemText(7, _translate("MainWindow", "gray"))
        self.comboBox.setItemText(8, _translate("MainWindow", "black"))


    def operating(self): 
        self.actions()
        self.initialize()
        self.createFrame()

    def initialize(self): 
        self.meshes=[]; self.points=[]

        self.dfile = "qt_pyVista.dir"
        cwd =os.getcwd()
        if os.path.isfile(self.dfile) == False: 
            df = cwd + '/' +self.dfile
            self.cwd=writeworkingdirectory(df, dfile=self.dfile)
        else: 
            f = open(self.dfile, 'r')
            line =f.readlines()
            f.close()
            self.cwd =line[0]

    def actions(self): 
        self.pushButton_openfile.clicked.connect(self.openFile)
        self.pushButton_add_Mesh.clicked.connect(self.addMesh)

    def createFrame(self): 
        self.frame = QtWidgets.QFrame() 
        self.plotter = QtInteractor(self.frame)
        self.verticalLayout.addWidget(self.plotter.interactor) 
        
    def openFile(self): 
        self.meshfile, _ = QtWidgets.QFileDialog.getOpenFileName(None, "Select File", self.cwd, "File Open(*.trd *.axi *.ptn)")

        if self.meshfile: 
            self.cwd = writeworkingdirectory(self.meshfile, dfile=self.dfile)
            self.meshes=[]; self.points=[]; self.colors=[]
            for i in range(self.verticalLayout.count()): self.verticalLayout.itemAt(i).widget().close()
            self.createFrame()
            
            if ".ptn" in self.meshfile: 
                trd, pt1 = Mesh.load_pyVista_mesh(self.meshfile, points=True, centering=True) 
            else: 
                trd, pt1 = Mesh.load_pyVista_mesh(self.meshfile, points=True) 

            self.meshes.append(trd)
            self.points.append(pt1)
            self.colors.append(self.comboBox.currentText())
             
            self.showMesh(self.meshes, points=self.points, colors=self.colors)  

    def addMesh(self): 
        self.meshfile, _ = QtWidgets.QFileDialog.getOpenFileName(None, "Select File", self.cwd, "File Open(*.trd *.axi *.ptn)")

        if self.meshfile: 
            self.cwd = writeworkingdirectory(self.meshfile, dfile=self.dfile)

            if ".ptn" in self.meshfile: 
                trd, pt1 = Mesh.load_pyVista_mesh(self.meshfile, points=True, centering=True) 
            else: 
                trd, pt1 = Mesh.load_pyVista_mesh(self.meshfile, points=True) 

            self.meshes.append(trd)
            self.points.append(pt1)
            self.colors.append(self.comboBox.currentText())

            self.showMesh(self.meshes, points=self.points, colors=self.colors) 

    def showMesh(self, meshes, points=None, colors=None):
        for mesh, clr in zip(meshes, colors): 
            self.plotter.add_mesh(mesh, show_edges=True, color=clr, metallic=0.3, pbr=False, diffuse=1) 
            print(" Color %s"%(clr))

        lights = Mesh.lighting()
        for light in lights: 
            self.plotter.add_light(light)    

        self.plotter.set_background('gray', top='white')
        self.plotter.show()
        
def writeworkingdirectory(readfile, dfile='pdir.dir'): 
    cwd=''
    drs = readfile.split("/")
    for i, dr in enumerate(drs): 
        cwd += dr + '/'
        if i == len(drs) -2 : break 
    f= open(dfile, "w")
    f.write(cwd)
    f.close()

    return cwd 
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    ui.operating()
    MainWindow.show()
    sys.exit(app.exec_())
